// web.js

// EXTERNAL IMPORTS
var express = require('express')
const bodyParser = require('body-parser');

//GLOBALS
BOT            = null
LAST_STATE     = null
WAIT_TIME      = 1000 // 1 Second
CHECK_INTERVAL = 100  //(1/10) Second
CONSOLE_CACHE  = []
LOGGING_STRING = "web.js     || "


// 1.) ---- CONFIGURE AND LAUNCH WEB SERVER --------------------------------------------------------- //


var app = express();
app.set('port', (process.env.PORT || 5000));
app.use(express.static(__dirname + '/public'));
app.use(bodyParser.json());      
app.use(bodyParser.urlencoded({ extended: true }));                                
// views is directory for all template files
app.set('views', __dirname + '/views');
app.set('view engine', 'ejs');
app.listen(app.get('port'), function() {
    //log_event('Carmen Administrative Terminal running on: ' + app.get('port'));
});


// 2.) ---- GET / POST EVENTS ----------------------------------------------------------------------- //


app.get('/', function(request, response) { response.render('pages/index'); });

app.post('/', function(request, response) { 
    data = request.body    
    if(data['OPCODE'] === "reset_api"){
        reset_bot();
        response.send(request.body);
    } else if(data['OPCODE'] === "fetch_updates"){
        forward_updates(response,0)
    } else if(data['OPCODE'] === "fetch_state"){
        forward_state(response)
    }
});


// 3.) ---- PUBLIC FUNCTIONS ------------------------------------------------------------------------ //


module.exports = {
    
    // Sets the global bot variable and fetches the current state of the BOT.
    //
    // @param BOT The bot being used.
    //
    launch_webserver: function(bot){
        BOT = bot
        LAST_STATE = BOT['connected']
    },
    
    // Adds a piece of text to the CONSOLE_CACHE array.
    //
    // @param TEXT A string of text to be printed to the web console.
    //
    print_web_console: function(text){ CONSOLE_CACHE.push(text) }
    
}


// 3.) ---- PRIVATE FUNCTIONS ----------------------------------------------------------------------- //


// Forwards the current state of the BOT to the webclient.
//
// @param RESPONSE The response object generated by a server request.
//
function forward_state(response){
    response.send({
        STATUS: BOT['connected'],
        CONSOLE: ''
    })
    log_event("Administrative Terminal Session Started...")
}


// Server-Side Long Polling Functionality:
// Checks for client updates every CHECK_INTERVAL milliseconds.
// If no changes were made within WAIT_TIME milliseconds the
// response is returned with nothing.
//
// @param RESPONSE The response object generated by a server request.
// @param TIME_PASSED The amount of time that has passed since the initial request.
//
function forward_updates(response, time_passed){
    changes = {}
    if(time_passed >= WAIT_TIME) response.send({})
    else{
        if(BOT['connected'] != LAST_STATE){
            LAST_STATE = BOT['connected']
            changes['STATUS'] = BOT['connected']
        }
        if(CONSOLE_CACHE.length !== 0){
            changes['CONSOLE'] = CONSOLE_CACHE.join("")
            CONSOLE_CACHE = []
        }
        if(Object.keys(changes).length === 0 && changes.constructor === Object){
            time_passed = time_passed + CHECK_INTERVAL
            setTimeout(function(){ forward_updates(response, time_passed) }, CHECK_INTERVAL)
        } else response.send(changes)
    }
}


// Resets BOT API Client
//
function reset_bot(){
    log_event("Resetting API Client...")
    BOT.disconnect();
}


// Logs Output to the NODEJS Console.
//
// @param STRING The string to log.
// @param NEWLINE If TRUE a newline will be appended to the end of
//                the string.
// @param INCLUDE_LOG_STRING If TRUE the LOGGING_STRING will be included.
//
function log_event(string, newline = true, include_log_string = true){
    logging_string = ''
    if(include_log_string) logging_string = LOGGING_STRING
    if(newline){
        module.exports['print_web_console'](logging_string + string + "\n")
        process.stdout.write(logging_string + string + "\n")
    } else {
        module.exports['print_web_console'](logging_string + string)
        process.stdout.write(logging_string + string)
    }
}
